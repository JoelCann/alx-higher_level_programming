The ``1-my_list`` module
	============================

	Using ``1-mylist``
	---------------------

	Imports function from module:
	    >>> MyList = __import__('1-my_list').MyList

	Checks for correct Class Type test:
	    >>> check_list = MyList()
	    >>> type(check_list) == MyList
	    True

	Checks for correct Instance test:
	    >>> check_list = MyList()
	    >>> isinstance(check_list, list)
	    True

	Checks for print_sorted method is an instance method:
	    >>> type(MyList.__dict__['print_sorted'])
	    <class 'function'>

	Checks for print_sorted method via class:
	    >>> check_list.__class__.print_sorted()
	    Traceback (most recent call last):
	    TypeError: print_sorted() missing 1 required positional argument: 'self'

	Checks for print_sorted method with 1 arg:
	    >>> check_list.print_sorted([67, 0, 121])
	    Traceback (most recent call last):
	    TypeError: print_sorted() takes 1 positional argument but 2 were given

	Checks for empty list test:
	    >>> check_list = MyList()
	    >>> check_list.print_sorted()
	    []

	Checks for normal list test:
	    >>> check_list = MyList([3, 22, 1])
	    >>> check_list.print_sorted()
	    [1, 3, 22]

	Checks for normal list2:
	    >>> check_list = MyList([1, 4, 2, 3, 5])
	    >>> check_list.print_sorted()
	    [1, 2, 3, 4, 5]

	Negative numbers list test:
	    >>> check_list = MyList([-3001, -99, -579999, 0, -98167333, -222])
	    >>> check_list.print_sorted()
	    [-98167333, -579999, -3001, -222, -99, 0]

	Original list comparition:
	    >>> check_list = MyList([4, 21, 1, -14, 28, 180, 0])
	    >>> check_list.print_sorted()
	    [-14, 0, 1, 4, 21, 28, 180]
	    >>> check_list
	    [4, 21, 1, -14, 28, 180, 0]

	List already in order:
	    >>> check_list = MyList([-16, 0, 1, 5, 10, 32, 200])
	    >>> check_list.print_sorted()
	    [-16, 0, 1, 5, 10, 32, 200]

	Test append:
	    >>> check_list = MyList()
	    >>> check_list.append(58)
	    >>> check_list
	    [58]

